{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"MapLibre SDK Welcome","title":"Index"},{"location":"index.html#maplibre-sdk","text":"","title":"MapLibre SDK"},{"location":"index.html#welcome","text":"","title":"Welcome"},{"location":"android/index.html","text":"Android MapBox SDK / MapTiler Cloud example A live Android project/app that demonstrates how to use MapBox SDK for Android with MapTiler cloud. Other helpful links Mapbox Maps SDK for Android API documentation MapTiler Cloud Getting started Create MapTiler cloud account. Obtain the api key . Set the key for MapTiler in the application manifest ( /app/src/main/AndroidManifest.xml ) <meta-data android:name= \"com.maptiler.simplemap.mapTilerKey\" android:value= \"your key\" />","title":"Android MapBox SDK / MapTiler Cloud example"},{"location":"android/index.html#android-mapbox-sdk-maptiler-cloud-example","text":"A live Android project/app that demonstrates how to use MapBox SDK for Android with MapTiler cloud.","title":"Android MapBox SDK / MapTiler Cloud example"},{"location":"android/index.html#other-helpful-links","text":"Mapbox Maps SDK for Android API documentation MapTiler Cloud","title":"Other helpful links"},{"location":"android/index.html#getting-started","text":"Create MapTiler cloud account. Obtain the api key . Set the key for MapTiler in the application manifest ( /app/src/main/AndroidManifest.xml ) <meta-data android:name= \"com.maptiler.simplemap.mapTilerKey\" android:value= \"your key\" />","title":"Getting started"},{"location":"android/TUTORIAL.html","text":"MapTiler Tutorial for Android This tutorial describes how to create a simple Android application using Kotlin and Android SDK. This tutorial was written for macOS Create new project Open Android Studio and create new project and choose Empty Activity template. In the \"Language\" dropdown select \"kotlin\" and keep minimum API SDK to 16. Add MapLibre SDK to the project Add MapLibre SDK to your project using Maven. Open the project in Android Studio. Open up project-level (/build.gradle) file. Add bintray maven repositories to your build.gradle at project level so that you can access MapTiler packages for Android: allprojects { repositories { ... maven { url = \"https://dl.bintray.com/maplibre/maplibre-gl-native\" } } } 1. Open up module-level (/app/build.gradle) file. 1. Under dependencies, add a new build rule for the latest maplibre android-sdk. dependencies { ... implementation 'org.maplibre.gl:android-sdk:9.2.1' ... } MapTiler Key Create MapTiler cloud account. Obtain the api key . Add the key for MapTile key to the module-level build.gradle android { ... defaultConfig { ... resValue \"string\", \"mapTilerKey\", \"your key\" } Open MainActivity.kt file . Add code to read MapTilerKey from the manifest. private fun getMapTilerKey (): String ? { return packageManager . getApplicationInfo ( packageName , PackageManager . GET_META_DATA ). metaData . getString ( \"com.maptiler.simplemap.mapTilerKey\" ) } Add the layout for the map Navigate to /app/res/layout folder in Android Studio Add new layout named activity_main.xml <?xml version=\"1.0\" encoding=\"utf-8\"?> <androidx.constraintlayout.widget.ConstraintLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:tools= \"http://schemas.android.com/tools\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" tools:context= \".MainActivity\" > <com.mapbox.mapboxsdk.maps.MapView android:id= \"@+id/mapView\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> </androidx.constraintlayout.widget.ConstraintLayout> Initialize Map View Open the MainActivity.kt file. Add the member variable to hold MapView instance into MainActivity class private var mapView : MapView ? = null Add the following code to the onCreate method in order to construct map view. override fun onCreate ( savedInstanceState : Bundle ?) { super . onCreate ( savedInstanceState ) val mapTilerKey = getMapTilerKey () validateKey ( mapTilerKey ) val styleUrl = \"https://api.maptiler.com/maps/streets/style.json?key=${mapTilerKey}\" ; // Get the MapBox context Mapbox . getInstance ( this , null ) // Set the map view layout setContentView ( R . layout . activity_main ) // Create map view mapView = findViewById ( R . id . mapView ) mapView ?. onCreate ( savedInstanceState ) mapView ?. getMapAsync { map -> // Set the style after mapView was loaded map . setStyle ( styleUrl ) { map . uiSettings . setAttributionMargins ( 15 , 0 , 0 , 15 ) // Set the map view center map . cameraPosition = CameraPosition . Builder () . target ( LatLng ( 47.127757 , 8.579139 )) . zoom ( 10.0 ) . build () } } } Handle application lifecycle events Add the following code to MainActivity in order to handle application lifecycle events override fun onStart () { super . onStart () mapView ?. onStart () } override fun onResume () { super . onResume () mapView ?. onResume () } override fun onPause () { super . onPause () mapView ?. onPause () } override fun onStop () { super . onStop () mapView ?. onStop () } override fun onSaveInstanceState ( outState : Bundle ) { super . onSaveInstanceState ( outState ) mapView ?. onSaveInstanceState ( outState ) } override fun onLowMemory () { super . onLowMemory () mapView ?. onLowMemory () } override fun onDestroy () { super . onDestroy () mapView ?. onDestroy () }","title":"Android Basic Map"},{"location":"android/TUTORIAL.html#maptiler-tutorial-for-android","text":"This tutorial describes how to create a simple Android application using Kotlin and Android SDK. This tutorial was written for macOS","title":"MapTiler Tutorial for Android"},{"location":"android/TUTORIAL.html#create-new-project","text":"Open Android Studio and create new project and choose Empty Activity template. In the \"Language\" dropdown select \"kotlin\" and keep minimum API SDK to 16.","title":"Create new project"},{"location":"android/TUTORIAL.html#add-maplibre-sdk-to-the-project","text":"Add MapLibre SDK to your project using Maven. Open the project in Android Studio. Open up project-level (/build.gradle) file. Add bintray maven repositories to your build.gradle at project level so that you can access MapTiler packages for Android: allprojects { repositories { ... maven { url = \"https://dl.bintray.com/maplibre/maplibre-gl-native\" } } } 1. Open up module-level (/app/build.gradle) file. 1. Under dependencies, add a new build rule for the latest maplibre android-sdk. dependencies { ... implementation 'org.maplibre.gl:android-sdk:9.2.1' ... }","title":"Add MapLibre SDK to the project"},{"location":"android/TUTORIAL.html#maptiler-key","text":"Create MapTiler cloud account. Obtain the api key . Add the key for MapTile key to the module-level build.gradle android { ... defaultConfig { ... resValue \"string\", \"mapTilerKey\", \"your key\" } Open MainActivity.kt file . Add code to read MapTilerKey from the manifest. private fun getMapTilerKey (): String ? { return packageManager . getApplicationInfo ( packageName , PackageManager . GET_META_DATA ). metaData . getString ( \"com.maptiler.simplemap.mapTilerKey\" ) }","title":"MapTiler Key"},{"location":"android/TUTORIAL.html#add-the-layout-for-the-map","text":"Navigate to /app/res/layout folder in Android Studio Add new layout named activity_main.xml <?xml version=\"1.0\" encoding=\"utf-8\"?> <androidx.constraintlayout.widget.ConstraintLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:tools= \"http://schemas.android.com/tools\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" tools:context= \".MainActivity\" > <com.mapbox.mapboxsdk.maps.MapView android:id= \"@+id/mapView\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> </androidx.constraintlayout.widget.ConstraintLayout>","title":"Add the layout for the map"},{"location":"android/TUTORIAL.html#initialize-map-view","text":"Open the MainActivity.kt file. Add the member variable to hold MapView instance into MainActivity class private var mapView : MapView ? = null Add the following code to the onCreate method in order to construct map view. override fun onCreate ( savedInstanceState : Bundle ?) { super . onCreate ( savedInstanceState ) val mapTilerKey = getMapTilerKey () validateKey ( mapTilerKey ) val styleUrl = \"https://api.maptiler.com/maps/streets/style.json?key=${mapTilerKey}\" ; // Get the MapBox context Mapbox . getInstance ( this , null ) // Set the map view layout setContentView ( R . layout . activity_main ) // Create map view mapView = findViewById ( R . id . mapView ) mapView ?. onCreate ( savedInstanceState ) mapView ?. getMapAsync { map -> // Set the style after mapView was loaded map . setStyle ( styleUrl ) { map . uiSettings . setAttributionMargins ( 15 , 0 , 0 , 15 ) // Set the map view center map . cameraPosition = CameraPosition . Builder () . target ( LatLng ( 47.127757 , 8.579139 )) . zoom ( 10.0 ) . build () } } }","title":"Initialize Map View"},{"location":"android/TUTORIAL.html#handle-application-lifecycle-events","text":"Add the following code to MainActivity in order to handle application lifecycle events override fun onStart () { super . onStart () mapView ?. onStart () } override fun onResume () { super . onResume () mapView ?. onResume () } override fun onPause () { super . onPause () mapView ?. onPause () } override fun onStop () { super . onStop () mapView ?. onStop () } override fun onSaveInstanceState ( outState : Bundle ) { super . onSaveInstanceState ( outState ) mapView ?. onSaveInstanceState ( outState ) } override fun onLowMemory () { super . onLowMemory () mapView ?. onLowMemory () } override fun onDestroy () { super . onDestroy () mapView ?. onDestroy () }","title":"Handle application lifecycle events"},{"location":"ios-swiftui/index.html","text":"Mapbox iOS SDK / SwiftUI / MapTiler Cloud example A live Xcode project/app that demonstrates how to use Mapbox Maps SDK for iOS with MapTiler cloud. Other helpful links Mapbox Maps SDK for iOS API documentation First steps with the Mapbox Maps SDK for iOS MapTiler Cloud Getting started Open SimpleMap_SwiftUI.xcodeproj in Xcode. Add MapLibre SDK to your project using Swift Package Manager. Select File > Swift Packages > Add Package Dependency and enter its repository URL. You can also navigate to your target\u2019s General pane, and in the \u201cFrameworks, Libraries, and Embedded Content\u201d section, click the + button, select Add Other, and choose Add Package Dependency. Either add MapTiler GitHub distribution URL (https://github.com/maptiler/maplibre-gl-native-distribution) or search for maplibre-gl-native package. Choose \"next\". Xcode should clone the distribution repository and download the binaries. Choose both mapBox and MapBox Mobile Events libraries. Create MapTiler account and obtain the api key . Set the MapTilerKey property in SimpleMap_SwiftUI/info.plist to the value obtained in the previous step.","title":"Mapbox iOS SDK / SwiftUI / MapTiler Cloud example"},{"location":"ios-swiftui/index.html#mapbox-ios-sdk-swiftui-maptiler-cloud-example","text":"A live Xcode project/app that demonstrates how to use Mapbox Maps SDK for iOS with MapTiler cloud.","title":"Mapbox iOS SDK / SwiftUI / MapTiler Cloud example"},{"location":"ios-swiftui/index.html#other-helpful-links","text":"Mapbox Maps SDK for iOS API documentation First steps with the Mapbox Maps SDK for iOS MapTiler Cloud","title":"Other helpful links"},{"location":"ios-swiftui/index.html#getting-started","text":"Open SimpleMap_SwiftUI.xcodeproj in Xcode. Add MapLibre SDK to your project using Swift Package Manager. Select File > Swift Packages > Add Package Dependency and enter its repository URL. You can also navigate to your target\u2019s General pane, and in the \u201cFrameworks, Libraries, and Embedded Content\u201d section, click the + button, select Add Other, and choose Add Package Dependency. Either add MapTiler GitHub distribution URL (https://github.com/maptiler/maplibre-gl-native-distribution) or search for maplibre-gl-native package. Choose \"next\". Xcode should clone the distribution repository and download the binaries. Choose both mapBox and MapBox Mobile Events libraries. Create MapTiler account and obtain the api key . Set the MapTilerKey property in SimpleMap_SwiftUI/info.plist to the value obtained in the previous step.","title":"Getting started"},{"location":"ios-swiftui/TUTORIAL.html","text":"MapTiler Tutorial for iOS SwiftUI/Swift This tutorial describes how to create a simple iOS application using Swift and SwiftUI. This tutorial was written for macOS Create new project Open Xcode and create new project. Choose iOS -> App template. In the \"Choose options for your new project\" select Interface to \"SwiftUI\", lifecycle to \"SwiftUI App\", language to \"Swift\" Add MapLibre Native SDK for iOS Add MapLibre SDK to your project using Swift Package Manager. To add a package dependency to your Xcode project, select File > Swift Packages > Add Package Dependency and enter its repository URL. You can also navigate to your target\u2019s General pane, and in the \u201cFrameworks, Libraries, and Embedded Content\u201d section, click the + button, select Add Other, and choose Add Package Dependency. Either add MapTiler GitHub distribution URL (https://github.com/maptiler/maplibre-gl-native-distribution) or search for maplibre-gl-native package. Choose \"next\". Xcode should clone the distribution repository and download the binaries. Choose both mapBox and MapBox Mobile Events libraries. Create the SwiftUI View for the map In your project, add new SwiftUI View to the SimpleMap_SwiftUI folder and name it MapView.swift MapTiler Key Create MapTiler cloud account. Obtain the api key . Set the MapTilerKey property in SimpleMap_SwiftUI/info.plist to the value obtained in the previous step. Add the following method to MapView.swift. The method will MapTilerKey from property list. func getMapTilerkey () -> String { let mapTilerKey = Bundle . main . object ( forInfoDictionaryKey : \"MapTilerKey\" ) as ? String validateKey ( mapTilerKey ) return mapTilerKey ! } Create MapBox map view In your project, add new SwiftUI View to the SimpleMap_SwiftUI folder and name it MapView.swift In order to use native UIKit views in SwiftUI view, you must use [UIViewRepresentable](https://developer.apple.com/documentation/swiftui/uiviewrepresentable) wrapper. The instance of custom type which adopts UIViewRepresentable protocol is responsible for creation and management a UIView object in your SwiftUI interface. struct MapView : UIViewRepresentable { ... } The UIViewRepresentable requires to implement makeUIViewController(context:) method that creates the instance of with the desired UIKit view. Add the following code to create map view instance func makeUIView ( context : Context ) -> MGLMapView { // read the key from property list let mapTilerKey = getMapTilerkey () validateKey ( mapTilerKey ) // Build the style url let styleURL = URL ( string : \"https://api.maptiler.com/maps/streets/style.json?key= \\( mapTilerKey ) \" ) // create the mapview let mapView = MGLMapView ( frame : . zero , styleURL : styleURL ) mapView . autoresizingMask = [. flexibleWidth , . flexibleHeight ] mapView . logoView . isHidden = true mapView . setCenter ( CLLocationCoordinate2D ( latitude : 47.127757 , longitude : 8.579139 ), zoomLevel : 10 , animated : false ) // use the coordinator only if you need // to respond to the map events mapView . delegate = context . coordinator return mapView } The UIViewRepresentable view also requires to implement updateUIView(_:context:) which is used to configure the newly created instance. We dont need to configure anything so we will keep it empty. func updateUIView ( _ uiView : MGLMapView , context : Context ) {} Respond to map events If order to to respond to map events, for example perform an action after MapView initialization finished. In SwiftUI, a Coordinator can be used with delegates, data sources, and user events. The UIViewRepresentable protocol defines makeCoordinator() method which creates coordinator instance. Add the following code to declare coordinator class: class Coordinator : NSObject , MGLMapViewDelegate { var control : MapView init ( _ control : MapView ) { self . control = control } func mapViewDidFinishLoadingMap ( _ mapView : MGLMapView ) { // write your custom code which will be executed // after map has been loaded } } And then add the following method to the SwiftUI view: func makeCoordinator () -> MapView . Coordinator { Coordinator ( self ) } And finally set the reference coordinator on mapbox map view mapView . delegate = context . coordinator","title":"iOS Basic Map (swift)"},{"location":"ios-swiftui/TUTORIAL.html#maptiler-tutorial-for-ios-swiftuiswift","text":"This tutorial describes how to create a simple iOS application using Swift and SwiftUI. This tutorial was written for macOS","title":"MapTiler Tutorial for iOS SwiftUI/Swift"},{"location":"ios-swiftui/TUTORIAL.html#create-new-project","text":"Open Xcode and create new project. Choose iOS -> App template. In the \"Choose options for your new project\" select Interface to \"SwiftUI\", lifecycle to \"SwiftUI App\", language to \"Swift\"","title":"Create new project"},{"location":"ios-swiftui/TUTORIAL.html#add-maplibre-native-sdk-for-ios","text":"Add MapLibre SDK to your project using Swift Package Manager. To add a package dependency to your Xcode project, select File > Swift Packages > Add Package Dependency and enter its repository URL. You can also navigate to your target\u2019s General pane, and in the \u201cFrameworks, Libraries, and Embedded Content\u201d section, click the + button, select Add Other, and choose Add Package Dependency. Either add MapTiler GitHub distribution URL (https://github.com/maptiler/maplibre-gl-native-distribution) or search for maplibre-gl-native package. Choose \"next\". Xcode should clone the distribution repository and download the binaries. Choose both mapBox and MapBox Mobile Events libraries.","title":"Add MapLibre Native SDK for iOS"},{"location":"ios-swiftui/TUTORIAL.html#create-the-swiftui-view-for-the-map","text":"In your project, add new SwiftUI View to the SimpleMap_SwiftUI folder and name it MapView.swift","title":"Create the SwiftUI View for the map"},{"location":"ios-swiftui/TUTORIAL.html#maptiler-key","text":"Create MapTiler cloud account. Obtain the api key . Set the MapTilerKey property in SimpleMap_SwiftUI/info.plist to the value obtained in the previous step. Add the following method to MapView.swift. The method will MapTilerKey from property list. func getMapTilerkey () -> String { let mapTilerKey = Bundle . main . object ( forInfoDictionaryKey : \"MapTilerKey\" ) as ? String validateKey ( mapTilerKey ) return mapTilerKey ! }","title":"MapTiler Key"},{"location":"ios-swiftui/TUTORIAL.html#create-mapbox-map-view","text":"In your project, add new SwiftUI View to the SimpleMap_SwiftUI folder and name it MapView.swift In order to use native UIKit views in SwiftUI view, you must use [UIViewRepresentable](https://developer.apple.com/documentation/swiftui/uiviewrepresentable) wrapper. The instance of custom type which adopts UIViewRepresentable protocol is responsible for creation and management a UIView object in your SwiftUI interface. struct MapView : UIViewRepresentable { ... } The UIViewRepresentable requires to implement makeUIViewController(context:) method that creates the instance of with the desired UIKit view. Add the following code to create map view instance func makeUIView ( context : Context ) -> MGLMapView { // read the key from property list let mapTilerKey = getMapTilerkey () validateKey ( mapTilerKey ) // Build the style url let styleURL = URL ( string : \"https://api.maptiler.com/maps/streets/style.json?key= \\( mapTilerKey ) \" ) // create the mapview let mapView = MGLMapView ( frame : . zero , styleURL : styleURL ) mapView . autoresizingMask = [. flexibleWidth , . flexibleHeight ] mapView . logoView . isHidden = true mapView . setCenter ( CLLocationCoordinate2D ( latitude : 47.127757 , longitude : 8.579139 ), zoomLevel : 10 , animated : false ) // use the coordinator only if you need // to respond to the map events mapView . delegate = context . coordinator return mapView } The UIViewRepresentable view also requires to implement updateUIView(_:context:) which is used to configure the newly created instance. We dont need to configure anything so we will keep it empty. func updateUIView ( _ uiView : MGLMapView , context : Context ) {}","title":"Create MapBox map view"},{"location":"ios-swiftui/TUTORIAL.html#respond-to-map-events","text":"If order to to respond to map events, for example perform an action after MapView initialization finished. In SwiftUI, a Coordinator can be used with delegates, data sources, and user events. The UIViewRepresentable protocol defines makeCoordinator() method which creates coordinator instance. Add the following code to declare coordinator class: class Coordinator : NSObject , MGLMapViewDelegate { var control : MapView init ( _ control : MapView ) { self . control = control } func mapViewDidFinishLoadingMap ( _ mapView : MGLMapView ) { // write your custom code which will be executed // after map has been loaded } } And then add the following method to the SwiftUI view: func makeCoordinator () -> MapView . Coordinator { Coordinator ( self ) } And finally set the reference coordinator on mapbox map view mapView . delegate = context . coordinator","title":"Respond to map events"},{"location":"ios-uikit/index.html","text":"Mapbox iOS SDK / UIKit / MapTiler Cloud example A live Xcode project/app that demonstrates how to use Mapbox Maps SDK for iOS with MapTiler cloud. Other helpful links Mapbox Maps SDK for iOS API documentation First steps with the Mapbox Maps SDK for iOS MapTiler Cloud Getting started Open SimpleMap_UIKit.xcodeproj in Xcode. Add MapLibre SDK to your project using Swift Package Manager. Select File > Swift Packages > Add Package Dependency and enter its repository URL. You can also navigate to your target\u2019s General pane, and in the \u201cFrameworks, Libraries, and Embedded Content\u201d section, click the + button, select Add Other, and choose Add Package Dependency. Either add MapTiler GitHub distribution URL (https://github.com/maptiler/maplibre-gl-native-distribution) or search for maplibre-gl-native package. Choose \"next\". Xcode should clone the distribution repository and download the binaries. Choose both mapBox and MapBox Mobile Events libraries. Create MapTiler account and obtain the api key . Set the MapTilerKey property in SimpleMap_UIKit/info.plist to the value obtained in the previous step.","title":"Mapbox iOS SDK / UIKit / MapTiler Cloud example"},{"location":"ios-uikit/index.html#mapbox-ios-sdk-uikit-maptiler-cloud-example","text":"A live Xcode project/app that demonstrates how to use Mapbox Maps SDK for iOS with MapTiler cloud.","title":"Mapbox iOS SDK / UIKit / MapTiler Cloud example"},{"location":"ios-uikit/index.html#other-helpful-links","text":"Mapbox Maps SDK for iOS API documentation First steps with the Mapbox Maps SDK for iOS MapTiler Cloud","title":"Other helpful links"},{"location":"ios-uikit/index.html#getting-started","text":"Open SimpleMap_UIKit.xcodeproj in Xcode. Add MapLibre SDK to your project using Swift Package Manager. Select File > Swift Packages > Add Package Dependency and enter its repository URL. You can also navigate to your target\u2019s General pane, and in the \u201cFrameworks, Libraries, and Embedded Content\u201d section, click the + button, select Add Other, and choose Add Package Dependency. Either add MapTiler GitHub distribution URL (https://github.com/maptiler/maplibre-gl-native-distribution) or search for maplibre-gl-native package. Choose \"next\". Xcode should clone the distribution repository and download the binaries. Choose both mapBox and MapBox Mobile Events libraries. Create MapTiler account and obtain the api key . Set the MapTilerKey property in SimpleMap_UIKit/info.plist to the value obtained in the previous step.","title":"Getting started"},{"location":"ios-uikit/TUTORIAL.html","text":"MapTiler Tutorial for iOS UIKIt/Swift This tutorial describes how to create a simple iOS application using Swift and UIKit. This tutorial was written for macOS Create new project Open Xcode and create new project. Choose iOS -> App template. In the \"Choose options for your new project\" select Interface to \"Storyboard\", lifecycle to \"UI App Delegate\", language to \"Swift\" Add MapLibre Native SDK for iOS Add MapLibre SDK to your project using Swift Package Manager. To add a package dependency to your Xcode project, select File > Swift Packages > Add Package Dependency and enter its repository URL. You can also navigate to your target\u2019s General pane, and in the \u201cFrameworks, Libraries, and Embedded Content\u201d section, click the + button, select Add Other, and choose Add Package Dependency. Either add MapTiler GitHub distribution URL (https://github.com/maptiler/maplibre-gl-native-distribution) or search for maplibre-gl-native package. Choose \"next\". Xcode should clone the distribution repository and download the binaries. Choose both mapBox and MapBox Mobile Events libraries. MapTiler Key Create MapTiler cloud account. Obtain the api key . Set the MapTilerKey property in SimpleMap_UIKit/info.plist to the value obtained in the previous step. Open the SimpleMap_UIKit.xcworkspace in Xcode and navigate to ViewController.swift. Add code to read MapTilerKey from property list. func getMapTilerkey () -> String { let mapTilerKey = Bundle . main . object ( forInfoDictionaryKey : \"MapTilerKey\" ) as ? String validateKey ( mapTilerKey ) return mapTilerKey ! } Initialize Map View Open the ViewController.swift file. Add the following code in the viewDidLoad method in order to construct map view. func viewDidLoad () { super . viewDidLoad () // retrieve MapTiler key from property list let mapTilerKey = getMapTilerkey () title = \"Simple Map\" // construct style URL let styleURL = URL ( string : \"https://api.maptiler.com/maps/streets/style.json?key= \\( mapTilerKey ) \" ) // create the map view let mapView = MGLMapView ( frame : view . bounds , styleURL : styleURL ) mapView . autoresizingMask = [. flexibleWidth , . flexibleHeight ] mapView . delegate = self mapView . logoView . isHidden = true // Set the map\u2019s center coordinate and zoom level. mapView . setCenter ( CLLocationCoordinate2D ( latitude : 47.127757 , longitude : 8.579139 ), zoomLevel : 10 , animated : false ) view . addSubview ( mapView ) } If you would need to respond to MapView events, for example perform an action after MapView initialization finished, place the MGLMapViewDelegate protocol name after the ViewController name and set the MapView delegate reference to ViewController class ViewController : UIViewController , MGLMapViewDelegate { ... } and override func viewDidLoad () { ... mapView . delegate = self ... }","title":"iOS Basic Map (uikit)"},{"location":"ios-uikit/TUTORIAL.html#maptiler-tutorial-for-ios-uikitswift","text":"This tutorial describes how to create a simple iOS application using Swift and UIKit. This tutorial was written for macOS","title":"MapTiler Tutorial for iOS UIKIt/Swift"},{"location":"ios-uikit/TUTORIAL.html#create-new-project","text":"Open Xcode and create new project. Choose iOS -> App template. In the \"Choose options for your new project\" select Interface to \"Storyboard\", lifecycle to \"UI App Delegate\", language to \"Swift\"","title":"Create new project"},{"location":"ios-uikit/TUTORIAL.html#add-maplibre-native-sdk-for-ios","text":"Add MapLibre SDK to your project using Swift Package Manager. To add a package dependency to your Xcode project, select File > Swift Packages > Add Package Dependency and enter its repository URL. You can also navigate to your target\u2019s General pane, and in the \u201cFrameworks, Libraries, and Embedded Content\u201d section, click the + button, select Add Other, and choose Add Package Dependency. Either add MapTiler GitHub distribution URL (https://github.com/maptiler/maplibre-gl-native-distribution) or search for maplibre-gl-native package. Choose \"next\". Xcode should clone the distribution repository and download the binaries. Choose both mapBox and MapBox Mobile Events libraries.","title":"Add MapLibre Native SDK for iOS"},{"location":"ios-uikit/TUTORIAL.html#maptiler-key","text":"Create MapTiler cloud account. Obtain the api key . Set the MapTilerKey property in SimpleMap_UIKit/info.plist to the value obtained in the previous step. Open the SimpleMap_UIKit.xcworkspace in Xcode and navigate to ViewController.swift. Add code to read MapTilerKey from property list. func getMapTilerkey () -> String { let mapTilerKey = Bundle . main . object ( forInfoDictionaryKey : \"MapTilerKey\" ) as ? String validateKey ( mapTilerKey ) return mapTilerKey ! }","title":"MapTiler Key"},{"location":"ios-uikit/TUTORIAL.html#initialize-map-view","text":"Open the ViewController.swift file. Add the following code in the viewDidLoad method in order to construct map view. func viewDidLoad () { super . viewDidLoad () // retrieve MapTiler key from property list let mapTilerKey = getMapTilerkey () title = \"Simple Map\" // construct style URL let styleURL = URL ( string : \"https://api.maptiler.com/maps/streets/style.json?key= \\( mapTilerKey ) \" ) // create the map view let mapView = MGLMapView ( frame : view . bounds , styleURL : styleURL ) mapView . autoresizingMask = [. flexibleWidth , . flexibleHeight ] mapView . delegate = self mapView . logoView . isHidden = true // Set the map\u2019s center coordinate and zoom level. mapView . setCenter ( CLLocationCoordinate2D ( latitude : 47.127757 , longitude : 8.579139 ), zoomLevel : 10 , animated : false ) view . addSubview ( mapView ) } If you would need to respond to MapView events, for example perform an action after MapView initialization finished, place the MGLMapViewDelegate protocol name after the ViewController name and set the MapView delegate reference to ViewController class ViewController : UIViewController , MGLMapViewDelegate { ... } and override func viewDidLoad () { ... mapView . delegate = self ... }","title":"Initialize Map View"}]}